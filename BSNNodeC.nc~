#include "Timer.h"
#include "BSN.h"
 

module BSNNodeC  {

	uses {
		interface Boot;
		interface Receive;
		interface AMSend;
		interface AMPacket;
		interface PacketAcknowledgements;
		interface Timer<TMilli> as TimerRead;
		interface Timer<TMilli> as TimerSendDelay;
		interface SplitControl as AMControl;
		interface Packet;
		interface Read<uint16_t> as ACCRead;
		interface SplitControl as ACCSplitControl;
		interface Read<uint16_t> as ECGRead;
		interface SplitControl as ECGSplitControl;
	}

}

implementation {
	/* SEZIONE CONDIVISA */
	message_t packet;

	/* SEZIONE NODO ECG */
	uint16_t crisis; //Numero di CRISIS arrivati nella sessione
	uint16_t movements; //Numero di MOVEMENT arrivati nella sessione
	uint16_t responseCounter; //Numero di risposte arrivato nella sessione

	task void startSession(); 
	task void evaluateSituation();

	/* SEZIONE NODO ACC */

	uint16_t sampleCounter; //Numero di campioni ottenuti nella sessione
	uint16_t response; //Codice della risposta da inviare al nodo ECG
	uint32_t accumulator; //Somma dei valori dei campioni ottenuti nella sessione

	task void sendResponse();
	task void computeResponse();
	task void startMonitoring();
	
  	
	/************************************ EVENTS ************************************/
  
  
	event void Boot.booted() {
		crisis = 0;
		movements = 0;
		responseCounter = 0;
		response = 0;
		sampleCounter = 0;
		accumulator = 0;
		call AMControl.start();
		if (TOS_NODE_ID == 0) {
			call ECGSplitControl.start();
		} else {
			call ACCSplitControl.start();
		}
	}
	
	
	event void AMControl.startDone(error_t err) {
		if (err == SUCCESS) {
			dbg_clear("main", "%s - Nodo %hhu: trasmettitore acceso. \n", sim_time_string(), TOS_NODE_ID);
			/*Nei nodi ACC response all'inizio è 0 e viene cambiato col valore da mandare solo alla fine della sessione
			* di monitoraggio, quando viene riacceso il trasmettitore del nodo ACC e viene quindi inviata la risposta */
			if(TOS_NODE_ID != 0 && response != 0) {
				/*I nodi ACC trasmettono con un ritardo che per comodità dipende dal loro ID, in modo da evitare collisioni */
				call TimerSendDelay.startOneShot(TOS_NODE_ID*DELAY); 
			} 
		} else {
			dbg_clear("main", "%s - Nodo %hhu: accensione trasmettitore fallita, inizio nuovo tentativo... \n", sim_time_string(), TOS_NODE_ID);
			call AMControl.start();
		}
	}
	
	/**
	* Il sensore ECG viene attivato solo sul nodo 0 (vedi booted). Completato l'avvio del sensore ECG può
	* essere mandato il segnale di avvio della sessione 
	*/
	event void ECGSplitControl.startDone(error_t err) {
		if (err == SUCCESS) {
			if (TOS_NODE_ID == 0) {
				post startSession();
			}
		} else {
			call ECGSplitControl.start();
		}
	}
	
	event void ACCSplitControl.startDone(error_t err) {
		if (err != SUCCESS) {
			if (TOS_NODE_ID != 0) {
				call ACCSplitControl.start();
			}
		}
	}
	
	event void AMControl.stopDone(error_t err) {
		dbg_clear("main", "%s - Nodo %hhu: trasmettitore spento. \n", sim_time_string(), TOS_NODE_ID);
	}

	event void ACCSplitControl.stopDone(error_t err) {
		//do nothing
	}

	event void ECGSplitControl.stopDone(error_t err) {
		//do nothing
	}

	event message_t* Receive.receive(message_t* buf,void* payload, uint8_t len) {
		my_msg_t* msg=(my_msg_t*)payload;
		uint16_t type = msg->type; 
		/*Quando i nodi diversi da 0 ricevono lo START iniziano a campionare tramite gli ACC */
		if(type == START && TOS_NODE_ID != 0) {
			post startMonitoring();
			dbg_clear("main", "%s - Nodo %hhu: ricevuto messaggio START. \n", sim_time_string(), TOS_NODE_ID);
		/*Quando il nodo 0 riceve un codice di risposta, registra se questo è un CRISIS o MOVEMENT ed incrementa il contatore
		* delle risposte arrivate. 
		* Non serve registrare un NO_MOVEMENT in quanto l'output del sistema può essere considerato NO_MOVEMENT di base, in modo che
		* solo i CRISIS ed i MOVEMENT possano alterare questo output 
		*/
		} else if (type != START && TOS_NODE_ID == 0) {
			if(type == CRISIS) {
				crisis++; //Se arriva CRISIS incremento il numero di questi arrivati
			} else if(type == MOVEMENT) {
				movements++; //Se arriva MOVEMENT incremento il numero di questi arrivati
			}
			responseCounter++; //Incremento il numero di risposte arrivate
			switch(type) {
				case(NO_MOVEMENT):
					dbg_clear("main", "%s - Nodo 0: ricevuto NO_MOVEMENT da Nodo %hhu\n", sim_time_string(), call AMPacket.source( buf ));
					break;
				case(MOVEMENT):
		 			dbg_clear("main", "%s - Nodo 0: ricevuto MOVEMENT da Nodo %hhu\n", sim_time_string(), call AMPacket.source( buf ));
					break;
				case(CRISIS):
					dbg_clear("main", "%s - Nodo 0: ricevuto CRISIS da Nodo %hhu\n", sim_time_string(), call AMPacket.source( buf ));
					break;
			}
			/*Se tutti i quattro nodi periferici hanno segnalato un codice di risposta, inizio a calcolare l'output del sistema */
			if(responseCounter == 4) {
				post evaluateSituation();  
			} 
		}
		return buf;
	}
	
	/**
	* Gestisce lo scader di TimerRead: incrementa il numero di campioni ottenuto e se non sono stati ancora ottenuti 200 campioni
	* fa partire un altro campionamento e reimposta TimerRead a 50 ms (frequenza campionamento 20Hz). 
	*/
	event void TimerRead.fired() {
		sampleCounter++;
		call ACCRead.read();
		if(sampleCounter < 200) {
			call TimerRead.startOneShot( 50 );
		}   
	}
	
	/**
	* Prima di inviare un codice di risposta, i nodi ACC aspettano un intervallo di tempo che dipende dal loro ID, per evitare 
	* collisioni.
	*/

	event void TimerSendDelay.fired() {
		post sendResponse();
	}



	event void AMSend.sendDone(message_t* buf, error_t err) {
		if(err == SUCCESS ) {
			/* Il nodo 0 invia solo messaggi di START, quindi se il ID è 0 è avvenuto il broadcast di START */
			if(TOS_NODE_ID == 0) {
				dbg_clear("main", "%s - ***Sessione di monitoraggio iniziata*** \n", sim_time_string());
			}
			/*I nodi ACC trasmettono i codici di risposta in unicast al nodo 0, richiedendo ack, se questo non arriva
			* procedono al reinvio del codice di risposta 
			*/
			if ( !(call PacketAcknowledgements.wasAcked( buf )) && TOS_NODE_ID != 0 ) {
				dbg_clear("main", "%s - Nodo %hhu: ack non arrivato, reinvio in corso...\n", sim_time_string(), TOS_NODE_ID);
				post sendResponse();
			}
		/*Se l'invio di qualunque pacchetto fallisce, viene ritentato l'invio */
		} else {
			if(TOS_NODE_ID == 0) {
				post startSession();
			} else {
				post sendResponse();
			}
			dbg("main", "%s - Nodo %hhu: invio fallito, reinvio in corso...\n", sim_time_string(), TOS_NODE_ID);
		}
	}
	
	/**
	* Quando ottengo un campione, lo sommo all'accumulatore e se i campioni ottenuti finora sono 200, 
	* inizio a computare la risposta da inviare 
	*/
	event void ACCRead.readDone(error_t result, uint16_t data) {
		accumulator+= data;
		if(sampleCounter == 200) {
			post computeResponse();
		}
	}
	
	/**
	* Quando ottengo il responso del ECG, se è 0 l'output è MOVEMENT.
	* Se è 1 ma il numero di CRISIS arrivato è minore di 2, l'output è sempre MOVEMENT.
	* Se è 1 ed il numero di CRISIS arrivato è maggiore o uguale a 2, l'output è CRISIS 
	*/
	event void ECGRead.readDone(error_t result, uint16_t data) {
		dbg_clear("main", "%s - Nodo 0: risultato ECG = %hhu\n", sim_time_string(), data);
		if(data == 1 && crisis > 1) {
			dbg_clear("main", "%s OUTPUT = CRISIS !!!!!!!!!!!!!!!!!!\n", sim_time_string());
		} else {
			dbg_clear("main", "%s OUTPUT = MOVEMENT\n", sim_time_string());
		}
		post startSession();
	}

  

  /************************************ TASKS ************************************/

	
	/* -----------------ECG NODE SECTION----------------- */
	

	/**
	* Resetta tutte le variabili di sessione, invia segnale di START in broadcast 
	*/
	
	task void startSession() {
		my_msg_t* messaggio = (my_msg_t*)(call Packet.getPayload(&packet,sizeof(my_msg_t)));
		messaggio->type = START;
		responseCounter = 0;
		crisis = 0;
		movements = 0;
		dbg_clear("main", "\n\n\n%s - Nodo 0: Tentativo inizio sessione di monitoraggio,\n", sim_time_string());
		call AMSend.send(AM_BROADCAST_ADDR,&packet,sizeof(my_msg_t));
	}
	
	/**
	* Se la somma dei responsi CRISIS e MOVEMENT è almeno 3, inizia la lettura del ECG.
	* Altrimenti l'output del sistema è NO_MOVEMENT e viene iniziata una nuova sessione. 
	*/

	task void evaluateSituation() {
		if((crisis+movements) > 2) {
			call ECGRead.read();
		} else {
			dbg_clear("main", "%s - ***OUTPUT = NO_MOVEMENT***\n", sim_time_string());
			post startSession();   
		}
	}

	
	/* -----------------ACC NODE SECTION----------------- */

	
	/**
	* Invia al nodo 0 il codice di risposta computato per la sessione corrente, richiedendo un ack.
	*/
	task void sendResponse() {
		my_msg_t* msg = (my_msg_t*)(call Packet.getPayload(&packet,sizeof(my_msg_t)));
		msg->type = response;
		switch(response) {
			case(NO_MOVEMENT):
				dbg_clear("main", "%s - Nodo %hhu NO_MOVEMENT invio in corso...\n", sim_time_string(), TOS_NODE_ID);
				break;
			case(MOVEMENT):
	 			dbg_clear("main", "%s - Nodo %hhu MOVEMENT invio in corso...\n", sim_time_string(), TOS_NODE_ID);
				break;
			case(CRISIS):
				dbg_clear("main", "%s - Nodo %hhu CRISIS invio in corso...\n", sim_time_string(), TOS_NODE_ID);
				break;
		}
		call PacketAcknowledgements.requestAck( &packet );
		call AMSend.send(0,&packet,sizeof(my_msg_t));
	}

	/**
	* Scala l'accumulatore e computa la media dei campioni (AVG_FACTOR = fattore_scaling/200), è classifica il valore ottenuto
	* in una delle tre categorie rappresentate dai codici di risposta.
	*/

	task void computeResponse() {
		float result =((float)accumulator)*AVG_FACTOR;
		dbg_clear("main", "%s - Nodo %hhu: accumulatore = %d , media scalata = %f .\n", sim_time_string(), TOS_NODE_ID, accumulator,result);
		if(result < MTHR) {
			dbg_clear("main", "%s - Nodo %hhu: responso NO_MOVEMENT.\n", sim_time_string(), TOS_NODE_ID);
			response = NO_MOVEMENT;
		} else if (result > CTHR) {
			response = CRISIS;
			dbg_clear("main", "%s - Nodo %hhu: responso CRISIS.\n", sim_time_string(), TOS_NODE_ID);
		} else {
      			response = MOVEMENT;
			dbg_clear("main", "%s - Nodo %hhu: responso MOVEMENT.\n", sim_time_string(), TOS_NODE_ID);
    		}
   		call AMControl.start();
  	}

	/**
	* Resetta tutte le variabili di sessione, spegne il trasmettitore, richiede la prima lettura dal ACC ed avvia
	* il timer per la prossima lettura 
	*/

	task void startMonitoring() {
		response = 0;
		sampleCounter = 0;
		accumulator = 0;
		call AMControl.stop();
		call ACCRead.read();
		sampleCounter++;
		call TimerRead.startOneShot( 50 );
	}

}
